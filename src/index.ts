import ngrok from 'ngrok';
import dotenv from 'dotenv';
import TelegramBot, { ParseMode } from 'node-telegram-bot-api';
import { collections, connectToDatabase } from './database.service';
import Notifier from './Notifier';

dotenv.config();

const bot = new TelegramBot(process.env.TOKEN as string, { webHook: { port: process.env.PORT as number | undefined } });
const notifier = new Notifier(bot);

if(!process.env.RENDER) {
    ngrok.connect(8080).then(url => {
        bot.setWebHook(`${url}/bot${process.env.TOKEN}`);
        console.log("Bot started (dev)")
        console.log(url);
    });
} else {
    bot.setWebHook(`${process.env.RENDER_EXTERNAL_URL}/bot${process.env.TOKEN}`);
    console.log("Bot started (prod)")
    console.log(process.env.RENDER_EXTERNAL_URL);
}

connectToDatabase();

bot.setMyCommands([
    {command: '/start', description: '–ó–∞–ø—É—Å–∏—Ç—å –±–æ—Ç–∞'},
    {command: '/apply', description: '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É'},
    {command: '/menu', description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'},
]);

bot.onText(/\/addMeAsAdmin/, async msg => {
    const admins = collections.admins;
    admins?.updateOne({id: msg.from?.id}, {$set: msg.from}, {upsert: true}).then(() => {
        bot.sendMessage(msg.chat.id, "–í—ã —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä");
    });
})

bot.onText(/\/start/, async msg => {
    const whiteList = collections.users;
    const admins = collections.admins;
    const user = await whiteList?.findOne({id: msg.from?.id});
    const admin = await admins?.findOne({id: msg.from?.id});
    if(admin) {
        bot.sendMessage(msg.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∞–¥–º–∏–Ω");
        return;
    }

    if(!user) {
        bot.sendMessage(msg.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —á—Ç–æ—é—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /apply");
        return;
    }

    bot.sendMessage(msg.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—Å—è", {
        parse_mode: 'MarkdownV2' as ParseMode,
        reply_markup: {
            inline_keyboard: [[
                {text: '–ù–∞—á–∞–ª —Ä–∞–±–æ—Ç—É üëç', callback_data: JSON.stringify({ type: 'startWork', id: msg.from?.id })},
                {text: '–ó–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É üí§', callback_data: JSON.stringify({ type: 'finishWork', id: msg.from?.id })} ],[
                {text: '–í—ã—Å–ª–∞—Ç—å –æ—Ç—á–µ—Ç ‚úèÔ∏è', callback_data: JSON.stringify({ type: 'sendReport', id: msg.from?.id })},
                {text: '–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É üìã', callback_data: JSON.stringify({ type: 'fillForm' })},
            ]]
        }
    })
});


bot.onText(/\/menu/, async msg => {
    const whiteList = collections.users;
    const admins = collections.admins;
    const user = await whiteList?.findOne({id: msg.from?.id});
    const admin = await admins?.findOne({id: msg.from?.id});
    if(admin) {
        bot.sendMessage(msg.chat.id, "*–ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∞*");
        return;
    }

    if(!user) {
        bot.sendMessage(msg.chat.id, "–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /apply");
        return;
    }

    bot.sendMessage(msg.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—Å—è", {
        parse_mode: 'MarkdownV2' as ParseMode,
        reply_markup: {
            inline_keyboard: [[
                {text: '–ù–∞—á–∞–ª —Ä–∞–±–æ—Ç—É üëç', callback_data: JSON.stringify({ type: 'startWork', id: msg.from?.id })},
                {text: '–ó–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É üí§', callback_data: JSON.stringify({ type: 'finishWork', id: msg.from?.id })} ],[
                {text: '–í—ã—Å–ª–∞—Ç—å –æ—Ç—á–µ—Ç ‚úèÔ∏è', callback_data: JSON.stringify({ type: 'sendReport', id: msg.from?.id })},
                {text: '–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É üìã', callback_data: JSON.stringify({ type: 'fillForm' })},
            ]]
        }
    })
})

bot.onText(/\/apply/, async msg => {
    const whiteList = collections.users;
    const admins = collections.admins;
    const user = await whiteList?.findOne({id: msg.from?.id});
    const admin = await admins?.findOne({id: msg.from?.id});
    if(admin) {
        bot.sendMessage(msg.chat.id, "–í—ã —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä");
        return;
    }
    if(user) {
        bot.sendMessage(msg.chat.id, "–í—ã —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã");
        return;
    }

    bot.sendMessage(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è");
    bot.once('message', msg => {
        const name = msg.text;
        bot.sendMessage(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
        bot.once('message', msg => {
            notifier.notifyAdmins(`@${msg.from?.username} —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å –ø–æ–ø—Ä–æ—à–∞–π–∫–æ–π`, {
                parse_mode: 'MarkdownV2' as ParseMode,
                reply_markup: {
                    inline_keyboard: [[
                        {text: '–û–¥–æ–±—Ä–∏—Ç—å ‚úÖ', callback_data: JSON.stringify(
                            { 
                                type: 'acceptWorker', 
                                username: msg.from?.username, 
                                id: msg.from?.id 
                            }
                        )},
                        {text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå', callback_data: JSON.stringify(
                            { 
                                type: 'declineWorker',
                                username: msg.from?.username, 
                                id: msg.from?.id 
                            }
                        )},
                    ]]
                }
            })
            bot.sendMessage(msg.chat.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞");
        });
    })
    return;
})



bot.on('callback_query', async query => {
    if(!query.data) {
        bot.answerCallbackQuery(query.id, {text: 'Invalid callback data'})
        return;
    }

    const data = JSON.parse(query.data);
    switch(data.type) {
        case 'startWork': {
            const user = await collections.users?.findOne({id: data.id});
            const startTime = new Date();
            const startTimeStr = `${startTime.getHours()}:${startTime.getMinutes().toString().padStart(2, '0')}`;
            notifier.notifyAdmins(`@${user?.username} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É –≤ ${startTimeStr}`);
            collections.users?.updateOne({id: user?.id}, { $set: { workStarted: Date.now(), workedToday: true }});
            bot.sendMessage(data.id, "–•–æ—Ä–æ—à–∏—Ö —Å–±–æ—Ä–æ–≤!");
            break;
        }
        case 'finishWork': {
            const user = await collections.users?.findOne({id: data.id});
            if(!user?.workStarted) {
                bot.sendMessage(user?.id, `–ù–µ–ª—å–∑—è –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–µ –Ω–∞—á–∞–≤ –µ–µ :/`);
                break;
            }

            const finishTime = new Date();
            const workDuration = finishTime.getTime() - user?.workStarted as number;
            const hours = Math.floor(workDuration / (1000 * 60 * 60));
            const minutes = Math.floor((workDuration / (1000 * 60)) % 60);
            const durationStr = `${hours} —á. ${minutes} –º–∏–Ω.`;
            notifier.notifyAdmins(`@${user?.username} –∑–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–≤ ${durationStr}`)

            collections.users?.updateOne({id: user?.id}, { $set: {workStarted: null }});
            bot.sendMessage(data.id, `–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø–æ—Ä–∞ –≤ –æ—Ñ–∏—Å, –∏ –Ω–µ –∑–∞–±—É–¥—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –ø–æ —Å—Å—ã–ª–∫–µ: *—Å—Å—ã–ª–∫–∞*`, {
                parse_mode: 'MarkdownV2' as ParseMode,
                reply_markup: {
                    inline_keyboard: [[
                        {text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–æ—Ä–º—É üìã', callback_data: JSON.stringify({ type: 'confirmForm', id: query.from.id })}
                    ]]
                }
            });
            break;
        }
        case 'fillForm' : {
            bot.sendMessage(query.from.id, `–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –ø–æ —Å—Å—ã–ª–∫–µ: *—Å—Å—ã–ª–∫–∞*`, {
                parse_mode: 'MarkdownV2' as ParseMode,
                reply_markup: {
                    inline_keyboard: [[
                        {text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–æ—Ä–º—É üìã', callback_data: JSON.stringify({ type: 'confirmForm', id: query.from.id })}
                    ]]
                }
            });
            break;
        }
        case 'acceptWorker': {
            collections.users?.updateOne({id: data.id}, {$set: {username: data.username}}, {upsert: true})
            notifier.notifyAdmins(`@${data.username} –∑–∞–ø–∏—Å–∞–Ω –≤ –ø–æ–ø—Ä–æ—à–∞–π–∫–∏`);
            bot.sendMessage(data.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–∏–Ω—è—Ç—ã");
            if(query.message)
                bot.deleteMessage(query.from.id, query.message?.message_id);
            break;
        }
        case 'declineWorker': {
            collections.users?.deleteOne({id: data.id});
            notifier.notifyAdmins(`@${data.username} —É–≤–æ–ª–µ–Ω`)
            bot.sendMessage(data.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞");
            if(query.message)
                bot.deleteMessage(query.from.id, query.message?.message_id);
            break;
        }

        case 'confirmForm': {
            const user = await collections.users?.findOne({id: data.id});
            bot.sendMessage(data.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã");
            notifier.notifyAdmins(`@${user?.username} —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–ø–æ–ª–Ω–∏–ª —Ñ–æ—Ä–º—É`);
            collections.users?.updateOne({id: user?.id}, {$set: {formFilled: true}});
            if(query.message)
                bot.deleteMessage(query.from.id, query.message?.message_id);
            break;
        }

        case 'sendReport': {
            bot.sendMessage(data.id, "–í—ã—à–ª–∏—Ç–µ –æ—Ç—á–µ—Ç (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é)");
            bot.once('photo', async (msg) => {
                if (msg.photo) {
                    const user = await collections.users?.findOne({id: data.id});
                    notifier.notifyAdmins(`@${user?.username} –≤—ã—Å–ª–∞–ª –æ—Ç—á–µ—Ç`, {}, msg.photo![0].file_id);
                    bot.sendMessage(data.id, "–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
                } else {
                    bot.sendMessage(data.id, "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é :(");
                }
            });

            setTimeout(async () => {
                if (!photoSent) {
                    const user = await collections.users?.findOne({id: data.id});
                    notifier.notifyAdmins(`@${user?.username} –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–π –æ—Ç—á–µ—Ç –≤–æ–≤—Ä–µ–º—è`);
                }
            }, 10 * 60 * 1000); 

            let photoSent = false;
            bot.on('message', () => photoSent = true);

            break;
        }
    }
    bot.answerCallbackQuery(query.id)
})

bot.on('webhook_error', (error) => {
    console.error('Webhook Error:', error);
});

// TODO: move this to Notifier class
const doSomethingAt10PM = async () => {
    const currentTime = new Date();

    if (currentTime.getHours() === 22) {
        const users = await collections.users?.find() ?? [];
        users.forEach(user => {
            if(user.workedToday && !user.formFilled) {
                bot.sendMessage(user.id, "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É");
            }
            collections.users?.updateOne({id: user.id}, {$set: {workedToday: false, formFilled: null}});
        });
    }
};
  
setInterval(doSomethingAt10PM, 60 * 1000);